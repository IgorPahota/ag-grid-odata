{"version":3,"file":"index.js","sources":["../src/OdataProvider.js"],"sourcesContent":["export class OdataProvider {\r\n  callApi = null\r\n  groupCountFieldName = 'childCount'\r\n  isCaseSensitiveStringFilter = false\r\n  beforeRequest = null\r\n  beforeSetSecondaryColumns = null\r\n  afterLoadData = null\r\n  constructor (options = {}) {\r\n    Object.assign(this, options)\r\n    if (this.callApi == null) {\r\n      throw new Error('callApi must be specified')\r\n    }\r\n    if (typeof this.callApi !== 'function') {\r\n      throw new Error('callApi must be a function')\r\n    }\r\n    if (\r\n      this.beforeRequest != null &&\r\n      typeof this.beforeRequest !== 'function'\r\n    ) {\r\n      throw new Error('beforeRequest must be a function')\r\n    }\r\n    if (\r\n      this.afterLoadData != null &&\r\n      typeof this.afterLoadData !== 'function'\r\n    ) {\r\n      throw new Error('afterLoadData must be a function')\r\n    }\r\n  }\r\n\r\n  odataOperator = {\r\n    // Logical\r\n    equals: (col, value1) => `${col} eq ${value1}`,\r\n    notEqual: (col, value1) => `${col} ne ${value1}`,\r\n    lessThan: (col, value1) => `${col} lt ${value1}`,\r\n    lessThanOrEqual: (col, value1) => `${col} le ${value1}`,\r\n    greaterThan: (col, value1) => `${col} gt ${value1}`,\r\n    greaterThanOrEqual: (col, value1) => `${col} ge ${value1}`,\r\n    inRange: (col, value1, value2) =>\r\n      `(${col} ge ${value1} and ${col} le ${value2})`,\r\n    // String\r\n    equalsStr: (col, value1, isCaseSensitiveStringFilter) =>\r\n      `${this.ifTolowerCol(\r\n        col,\r\n        isCaseSensitiveStringFilter\r\n      )} eq ${this.ifTolower(value1, isCaseSensitiveStringFilter)}`,\r\n    notEqualStr: (col, value1, isCaseSensitiveStringFilter) =>\r\n      `${this.ifTolowerCol(\r\n        col,\r\n        isCaseSensitiveStringFilter\r\n      )} ne ${this.ifTolower(value1, isCaseSensitiveStringFilter)}`,\r\n    contains: (col, value1, isCaseSensitiveStringFilter) =>\r\n      `contains(${this.ifTolowerCol(\r\n        col,\r\n        isCaseSensitiveStringFilter\r\n      )},${this.ifTolower(value1, isCaseSensitiveStringFilter)})`,\r\n    notContains: (col, value1, isCaseSensitiveStringFilter) =>\r\n      `contains(${this.ifTolowerCol(\r\n        col,\r\n        isCaseSensitiveStringFilter\r\n      )},${this.ifTolower(value1, isCaseSensitiveStringFilter)}) eq false`,\r\n    startsWith: (col, value1, isCaseSensitiveStringFilter) =>\r\n      `startswith(${this.ifTolowerCol(\r\n        col,\r\n        isCaseSensitiveStringFilter\r\n      )},${this.ifTolower(value1, isCaseSensitiveStringFilter)})  eq true`,\r\n    endsWith: (col, value1, isCaseSensitiveStringFilter) =>\r\n      `endswith(${this.ifTolowerCol(\r\n        col,\r\n        isCaseSensitiveStringFilter\r\n      )},${this.ifTolower(value1, isCaseSensitiveStringFilter)})  eq true`,\r\n    inStr: (col, values, isCaseSensitiveStringFilter) =>\r\n      `${this.ifTolowerCol(col, isCaseSensitiveStringFilter)} in (${values\r\n        .map(x => `'${this.ifTolower(x, isCaseSensitiveStringFilter)}'`)\r\n        .join()})`,\r\n    in: (col, values) => `${col} in (${values.map(x => `${x}`).join()})`,\r\n    notIn: (col, values) =>\r\n      `not (${col} in (${values.map(x => `${x}`).join()}))`,\r\n    // Date\r\n    trunc: col => `date(${col})`\r\n  }\r\n\r\n  ifTolowerCol = (col, isCaseSensitiveStringFilter) =>\r\n    isCaseSensitiveStringFilter ? col : `tolower(${col})`\r\n\r\n  ifTolower = (value, isCaseSensitiveStringFilter) =>\r\n    isCaseSensitiveStringFilter ? value : value ? value.toLowerCase() : value\r\n\r\n  odataAggregation = {\r\n    // Logical\r\n    sum: (col, asField) => `${col} with sum as ${col || asField}`,\r\n    min: (col, asField) => `${col} with min as ${col || asField}`,\r\n    max: (col, asField) => `${col} with max as ${col || asField}`,\r\n    avg: (col, asField) => `${col} with average as ${col || asField}`,\r\n    count: (col, asField) => `$count as ${col || asField}`\r\n  }\r\n\r\n  toQuery = options => {\r\n    let path = []\r\n    if (options.count) {\r\n      path.push('$count=true')\r\n    }\r\n    if (options.skip) {\r\n      path.push(`$skip=${options.skip}`)\r\n    }\r\n    if (options.top) {\r\n      path.push(`$top=${options.top}`)\r\n    }\r\n    if (options.sort && options.sort.length > 0) {\r\n      path.push('$orderby=' + options.sort.join(','))\r\n    }\r\n    if (options.filter && options.filter.length > 0) {\r\n      path.push('$filter=' + options.filter.join(' and '))\r\n    }\r\n    if (options.apply && options.apply.length > 0) {\r\n      path.push('$apply=' + options.apply.join('/'))\r\n    }\r\n    if (options.expand && options.expand.length > 0) {\r\n      path.push('$expand=' + options.expand.join(','))\r\n    }\r\n    if (path.length > 0) {\r\n      path = '?' + path.join('&')\r\n    } else {\r\n      path = ''\r\n    }\r\n    return path\r\n  }\r\n\r\n  encode = value => (value ? value.replace(\"'\", \"''\") : value)\r\n  toDateTime = value => `${value}T00:00:00.000Z`\r\n  getFilterOdata = (colName, col) => {\r\n    colName = colName.replace('.', '/')\r\n    const me = this\r\n    colName = me.getWrapColumnName(colName)\r\n    switch (col.filterType) {\r\n      case 'number':\r\n        return me.odataOperator[col.type](colName, col.filter, col.filterTo)\r\n      case 'text': {\r\n        let operatorName = col.type\r\n        const filter = me.encode(col.filter)\r\n        // let filterTo = me.encode(col.filterTo);\r\n        if (\r\n          (operatorName === 'equals' || operatorName === 'notEqual') &&\r\n          !me.isCaseSensitiveStringFilter\r\n        ) {\r\n          operatorName += 'Str'\r\n        }\r\n        return me.odataOperator[operatorName](\r\n          colName,\r\n          `'${filter}'`,\r\n          me.isCaseSensitiveStringFilter\r\n        )\r\n      }\r\n      case 'date':\r\n        return me.odataOperator[col.type](\r\n          colName,\r\n          `${me.toDateTime(col.dateFrom)}`,\r\n          `${me.toDateTime(col.dateTo)}`\r\n        )\r\n      case 'set':\r\n        return col.values.length > 0\r\n          ? me.odataOperator.inStr(colName, col.values)\r\n          : null\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  getPivot = (pivotCols, rowGroupCols, valueCols, data, countField) => {\r\n    // assume 1 pivot col and 1 value col for this example\r\n\r\n    const pivotData = []\r\n    const aggColsList = []\r\n\r\n    const colKeyExistsMap = {}\r\n\r\n    const secondaryColDefs = []\r\n    const secondaryColDefsMap = {}\r\n\r\n    data.forEach(function (item) {\r\n      var pivotValues = []\r\n      pivotCols.forEach(function (pivotCol) {\r\n        var pivotField = pivotCol.id\r\n        var pivotValue = item[pivotField]\r\n        if (\r\n          pivotValue !== null &&\r\n          pivotValue !== undefined &&\r\n          pivotValue.toString\r\n        ) {\r\n          pivotValues.push(pivotValue.toString())\r\n        } else {\r\n          pivotValues.push('-')\r\n        }\r\n      })\r\n\r\n      // var pivotValue = item[pivotField].toString();\r\n      var pivotItem = {}\r\n\r\n      valueCols.forEach(function (valueCol) {\r\n        var valField = valueCol.id\r\n        var colKey = createColKey(pivotValues, valField)\r\n\r\n        var value = item[valField]\r\n        pivotItem[colKey] = value\r\n\r\n        if (!colKeyExistsMap[colKey]) {\r\n          addNewAggCol(colKey, valueCol)\r\n          addNewSecondaryColDef(colKey, pivotValues, valueCol)\r\n          colKeyExistsMap[colKey] = true\r\n        }\r\n      })\r\n      if (countField) {\r\n        pivotItem[countField] = item[countField]\r\n      }\r\n\r\n      rowGroupCols.forEach(function (rowGroupCol) {\r\n        var rowGroupField = rowGroupCol.id\r\n        pivotItem[rowGroupField] = item[rowGroupField]\r\n      })\r\n\r\n      pivotData.push(pivotItem)\r\n    })\r\n\r\n    function addNewAggCol (colKey, valueCol) {\r\n      var newCol = {\r\n        id: colKey,\r\n        field: colKey,\r\n        aggFunc: valueCol.aggFunc\r\n      }\r\n      aggColsList.push(newCol)\r\n    }\r\n\r\n    function addNewSecondaryColDef (colKey, pivotValues, valueCol) {\r\n      var parentGroup = null\r\n\r\n      var keyParts = []\r\n\r\n      pivotValues.forEach(function (pivotValue) {\r\n        keyParts.push(pivotValue)\r\n        var colKey = createColKey(keyParts)\r\n        var groupColDef = secondaryColDefsMap[colKey]\r\n        if (!groupColDef) {\r\n          groupColDef = {\r\n            groupId: colKey,\r\n            headerName: pivotValue,\r\n            children: []\r\n          }\r\n          secondaryColDefsMap[colKey] = groupColDef\r\n          if (parentGroup) {\r\n            parentGroup.children.push(groupColDef)\r\n          } else {\r\n            secondaryColDefs.push(groupColDef)\r\n          }\r\n        }\r\n        parentGroup = groupColDef\r\n      })\r\n\r\n      parentGroup.children.push({\r\n        colId: colKey,\r\n        headerName: valueCol.aggFunc + '(' + valueCol.displayName + ')',\r\n        field: colKey,\r\n        suppressMenu: true,\r\n        sortable: false\r\n      })\r\n    }\r\n\r\n    function createColKey (pivotValues, valueField) {\r\n      var result = pivotValues.join('|')\r\n      if (valueField !== undefined) {\r\n        result += '|' + valueField\r\n      }\r\n      result = result.replace('.', '*')\r\n      return result\r\n    }\r\n\r\n    return {\r\n      data: pivotData,\r\n      aggCols: aggColsList,\r\n      secondaryColDefs: secondaryColDefs\r\n    }\r\n  }\r\n\r\n  buildGroupsFromData = (rowData, rowGroupCols, groupKeys, countField) => {\r\n    const me = this\r\n    var rowGroupCol = rowGroupCols[groupKeys.length]\r\n    var field = rowGroupCol.id\r\n    var mappedRowData = me.groupBy(rowData, field)\r\n    var groups = []\r\n\r\n    me.iterateObject(mappedRowData, function (key, rowData) {\r\n      var groupItem = me.aggregateList(rowData, countField)\r\n      groupItem[field] = key\r\n      groups.push(groupItem)\r\n    })\r\n    return groups\r\n  }\r\n\r\n  iterateObject = (object, callback) => {\r\n    if (!object) {\r\n      return\r\n    }\r\n    const keys = Object.keys(object)\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key = keys[i]\r\n      const value = object[key]\r\n      callback(key, value)\r\n    }\r\n  }\r\n\r\n  groupBy = (data, field) => {\r\n    var result = {}\r\n    data.forEach(function (item) {\r\n      var key = item[field]\r\n      var listForThisKey = result[key]\r\n      if (!listForThisKey) {\r\n        listForThisKey = []\r\n        result[key] = listForThisKey\r\n      }\r\n      listForThisKey.push(item)\r\n    })\r\n    return result\r\n  }\r\n\r\n  aggregateList = (rowData, countField) => {\r\n    var result = {}\r\n    rowData.forEach(row => {\r\n      if (countField && row[countField] != null) {\r\n        const totalCount = (result[countField] || 0) + (row[countField] || 0)\r\n        delete row[countField]\r\n        result[countField] = totalCount\r\n      }\r\n      result = Object.assign(result, row)\r\n    })\r\n    return result\r\n  }\r\n\r\n  getFilterValuesParams = (field, callback) => {\r\n    const me = this\r\n    me.callApi(\r\n      me.toQuery({\r\n        apply: [`groupby((${me.getWrapColumnName(field)}))`]\r\n      })\r\n    ).then(x => {\r\n      if (x && x.value) {\r\n        callback(x.value.map(x => x[field]))\r\n      }\r\n    })\r\n  }\r\n\r\n  getWrapColumnName = colName => colName.replace('.', '/')\r\n  getRows = params => {\r\n    const me = this\r\n    const childCount = me.groupCountFieldName\r\n    const options = {}\r\n    const isServerMode = params.request != null\r\n    const request = isServerMode ? params.request : params\r\n    if (this.beforeRequest) {\r\n      this.beforeRequest(options, this, request)\r\n    }\r\n    if (request.sortModel.length > 0) {\r\n      const sort = options.sort || []\r\n      for (let i = 0; i < request.sortModel.length; i++) {\r\n        const col = request.sortModel[i]\r\n        let colName = me.getWrapColumnName(col.colId)\r\n        if (col.sort !== 'asc') {\r\n          colName += ' desc'\r\n        }\r\n        sort.push(colName)\r\n      }\r\n      options.sort = sort\r\n    }\r\n\r\n    const filter = options.filter || []\r\n    for (const colName in request.filterModel) {\r\n      if (request.filterModel.hasOwnProperty(colName)) {\r\n        const col = request.filterModel[colName]\r\n        let colFilter = ''\r\n        if (col.filterType) {\r\n          colFilter = me.getFilterOdata(colName, col)\r\n          if (colFilter) {\r\n            filter.push(colFilter)\r\n          }\r\n        } else {\r\n          const condition1 = me.getFilterOdata(colName, col.condition1)\r\n          const condition2 = me.getFilterOdata(colName, col.condition2)\r\n          if (condition1 && condition2) {\r\n            colFilter = `(${condition1} ${col.operator.toLowerCase()} ${condition2})`\r\n            filter.push(colFilter)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const pivotActive = !isServerMode\r\n      ? false\r\n      : request.pivotMode &&\r\n        request.pivotCols.length > 0 &&\r\n        request.valueCols.length > 0\r\n\r\n    const apply = options.apply || []\r\n    if (isServerMode) {\r\n      if (request.rowGroupCols.length > 0) {\r\n        const filterGroupBy = []\r\n        if (request.groupKeys.length < request.rowGroupCols.length) {\r\n          // If request only groups\r\n          for (let idx = 0; idx < request.groupKeys.length; idx++) {\r\n            const colValue = request.groupKeys[idx]\r\n            const condition = `${me.getWrapColumnName(\r\n              request.rowGroupCols[idx].field\r\n            )} eq '${me.encode(colValue)}'`\r\n            filterGroupBy.push(condition)\r\n          }\r\n          if (filterGroupBy.length > 0 || filter.length > 0) {\r\n            // Filters must by first\r\n            apply.push(`filter(${filterGroupBy.concat(filter).join(' and ')})`)\r\n          }\r\n\r\n          const aggregate = []\r\n          if (childCount) {\r\n            aggregate.push(me.odataAggregation.count(childCount))\r\n          }\r\n          if (request.valueCols.length > 0) {\r\n            for (let idx = 0; idx < request.valueCols.length; idx++) {\r\n              const colValue = request.valueCols[idx]\r\n              aggregate.push(\r\n                me.odataAggregation[colValue.aggFunc](\r\n                  me.getWrapColumnName(colValue.field)\r\n                )\r\n              )\r\n            }\r\n          }\r\n          let groups = [me.getWrapColumnName(request.rowGroupCols[request.groupKeys.length].field)]\r\n          const sort = options.sort || []\r\n          const sortColOnly = sort.map(x => x.split(' ')[0])\r\n          if (pivotActive) {\r\n            groups = groups.concat(\r\n              request.pivotCols.map(x => me.getWrapColumnName(x.field))\r\n            )\r\n            groups.forEach(x => {\r\n              if (sortColOnly.indexOf(x) < 0) {\r\n                sort.push(x)\r\n              }\r\n            })\r\n          }\r\n          options.sort = sort\r\n          apply.push(\r\n            `groupby((${groups.join(',')})${\r\n              aggregate.length > 0 ? `,aggregate(${aggregate.join(',')})` : ''\r\n            })`\r\n          )\r\n\r\n          options.apply = apply\r\n          delete options.sort\r\n        } else {\r\n          // If request rowData by group filter\r\n          for (let idx = 0; idx < request.groupKeys.length; idx++) {\r\n            const colValue = request.groupKeys[idx]\r\n            const condition = `${me.getWrapColumnName(\r\n              request.rowGroupCols[idx].field\r\n            )} eq '${colValue}'`\r\n            filter.push(condition)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (filter.length > 0) {\r\n      options.filter = filter\r\n    }\r\n    if (apply.length > 0) {\r\n      options.apply = apply\r\n      options.filter = null\r\n      options.expand = null;\r\n      // options.sort = null;\r\n    }\r\n    options.skip = request.startRow\r\n    options.top = request.endRow - request.startRow\r\n\r\n    if (!options.apply && options.skip === 0) {\r\n      options.count = true\r\n    }\r\n    const query = me.toQuery(options)\r\n\r\n    if (!pivotActive) {\r\n      params.parentNode.columnApi.setSecondaryColumns(null)\r\n    }\r\n    me.callApi(query).then(async x => {\r\n      if (!x) {\r\n        params.failCallback()\r\n      } else {\r\n        if (!pivotActive) {\r\n          if (!options.apply) {\r\n            params.successCallback(x.value, x['@odata.count'])\r\n            if (this.afterLoadData) {\r\n              this.afterLoadData(options, x.value, x['@odata.count'])\r\n            }\r\n          } else {\r\n            let count = x.value.length\r\n            if (count === options.top && options.skip === 0) {\r\n              // Если мы получили группировку с числом экземпляров больше чем у мы запросили, то делаем запрос общего количества\r\n              me.callApi(query + '/aggregate($count as count)').then(y => {\r\n                count = y[0].count\r\n                params.successCallback(x.value, count)\r\n              })\r\n            } else {\r\n              params.successCallback(x.value, count)\r\n              if (this.afterLoadData) {\r\n                this.afterLoadData(options, x.value, count)\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          let rowData = x\r\n          // Check count\r\n          if (\r\n            rowData.length === options.top &&\r\n            options.skip === 0 &&\r\n            request.groupKeys.length === 0\r\n          ) {\r\n            let eof = false\r\n            while (!eof) {\r\n              options.skip += options.top\r\n              const subQuery = me.toQuery(options)\r\n              const newRowData = await me.callApi(subQuery)\r\n              if (!newRowData) {\r\n                params.failCallback()\r\n                return\r\n              }\r\n              eof = newRowData.length !== options.top\r\n              rowData = rowData.concat(newRowData)\r\n            }\r\n          }\r\n          const pivotResult = me.getPivot(\r\n            request.pivotCols,\r\n            request.rowGroupCols,\r\n            request.valueCols,\r\n            rowData,\r\n            childCount\r\n          )\r\n          rowData = pivotResult.data\r\n          const secondaryColDefs = pivotResult.secondaryColDefs\r\n          rowData = me.buildGroupsFromData(\r\n            rowData,\r\n            request.rowGroupCols,\r\n            request.groupKeys,\r\n            childCount\r\n          )\r\n          const totalCount =\r\n            request.groupKeys.length === 0\r\n              ? rowData.length\r\n              : rowData.length === options.top\r\n                ? null\r\n                : rowData.length\r\n          if (totalCount > options.top) {\r\n            const serverSideBlock =\r\n              params.parentNode.rowModel.rowNodeBlockLoader.blocks[0]\r\n            serverSideBlock.rowNodeCacheParams.blockSize = totalCount\r\n            serverSideBlock.endRow = serverSideBlock.startRow + totalCount\r\n            serverSideBlock.createRowNodes()\r\n          }\r\n          params.successCallback(rowData, totalCount)\r\n          if (this.afterLoadData) {\r\n            this.afterLoadData(options, rowData, totalCount)\r\n          }\r\n          if (request.groupKeys.length === 0) {\r\n            if (this.beforeSetSecondaryColumns) {\r\n              this.beforeSetSecondaryColumns(secondaryColDefs)\r\n            }\r\n            params.parentNode.columnApi.setSecondaryColumns(secondaryColDefs)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n"],"names":["OdataProvider","constructor","options","equals","col","value1","notEqual","lessThan","lessThanOrEqual","greaterThan","greaterThanOrEqual","inRange","value2","equalsStr","isCaseSensitiveStringFilter","ifTolowerCol","ifTolower","notEqualStr","contains","notContains","startsWith","endsWith","inStr","values","map","x","join","in","notIn","trunc","value","toLowerCase","sum","asField","min","max","avg","count","path","push","skip","top","sort","length","filter","apply","expand","replace","colName","me","getWrapColumnName","filterType","odataOperator","type","filterTo","operatorName","encode","toDateTime","dateFrom","dateTo","pivotCols","rowGroupCols","valueCols","data","countField","pivotData","aggColsList","colKeyExistsMap","secondaryColDefs","secondaryColDefsMap","forEach","item","pivotValues","pivotCol","pivotField","id","pivotValue","undefined","toString","pivotItem","valueCol","valField","colKey","createColKey","addNewAggCol","addNewSecondaryColDef","rowGroupCol","rowGroupField","newCol","field","aggFunc","parentGroup","keyParts","groupColDef","groupId","headerName","children","colId","displayName","suppressMenu","sortable","valueField","result","aggCols","rowData","groupKeys","mappedRowData","groupBy","groups","iterateObject","key","groupItem","aggregateList","object","callback","keys","Object","i","listForThisKey","row","totalCount","assign","callApi","toQuery","then","params","childCount","groupCountFieldName","isServerMode","request","beforeRequest","sortModel","filterModel","hasOwnProperty","colFilter","getFilterOdata","condition1","condition2","operator","pivotActive","pivotMode","filterGroupBy","idx","colValue","condition","concat","aggregate","odataAggregation","sortColOnly","split","indexOf","startRow","endRow","query","parentNode","columnApi","setSecondaryColumns","failCallback","successCallback","afterLoadData","y","eof","subQuery","newRowData","pivotResult","getPivot","buildGroupsFromData","serverSideBlock","rowModel","rowNodeBlockLoader","blocks","rowNodeCacheParams","blockSize","createRowNodes","beforeSetSecondaryColumns","Error"],"mappings":"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"}